---
title: "2 Justify Sample Size"
format: 
  html:
    self-contained: true
editor: visual
---

```{r setup, message = FALSE, warning = FALSE}
library(tidyverse)
library(rstan)
library(patchwork)
library(tidybayes)

options(mc.cores = 8)

# set global ggplot theme
theme_set(theme_bw())

source("../functions/sim_foraging_data.R")
source("../functions/prep_data.R")
source("../functions/get_run_info.R")
source("../functions/import_data.R")
```

# Simulate Data

First we will simulate data using the parameters below. These are based on the model fits from Clarke, Hunt & Hughes (2022, Comp. Bio.) to data from Clarke et al (2022, QJEP) and Tagu & Kristjansson (2021). Please see the main manuscript for further justification.

```{r sim_data_setup}
######################################################
# first of all we want to generate some synthetic data
######################################################
cond_labels <- c("equal-feature", "scarce-feature","equal-conjunction", "scarce-conjunction" )

# number of participants should be a multiple of 6 due to counter balancing
n_people <- 36
n_trials_per_cond <- 5

n_targ_class <- 2
n_targ_per_class <- list(c(10, 10), c(5, 15), c(10, 10), c(5, 15))
targ_class_weights <- list(c(1,1), c(3,2),c(1,1), c(3,2)) # compared to approx 3:1 (75%) in Tagu & Kristjansson (2021)

pA <- c(
  targ_class_weights[[1]][1]/sum(targ_class_weights[[1]]), 
  targ_class_weights[[2]][1]/sum(targ_class_weights[[2]]),
  targ_class_weights[[3]][1]/sum(targ_class_weights[[3]]),
  targ_class_weights[[4]][1]/sum(targ_class_weights[[4]]))

b_stick <- c(1, 1, 2, 2)
sig_rho <- c(15, 15, 10, 10)
sig_d <- -1

# random effect sds
phi_class_weights <- 0.05
phi_stick <- 0.5
phi_rho <- 5
phi_d <- 0.5

n_conditions <- length(n_targ_per_class)
```

```{r sim_data, eval = FALSE}
# now simulate data
d <- sim_foraging_people(n_people = n_people,
                         n_conditions = n_conditions,
                         n_trials_per_cond = n_trials_per_cond,
                         n_targ_class = n_targ_class,
                         n_targ_per_class = n_targ_per_class,
                         targ_class_weights = targ_class_weights, phi_class_weights = phi_class_weights,
                         bS = b_stick, sig_rho = sig_rho, sig_d = sig_d, # fixed effects
                         phi_stick = phi_stick, phi_rho = phi_rho, phi_d = phi_d,
                         cond_labels) # random effects)

write_csv(d %>% mutate(x = round(x, 3), y = round(y, 3)), "../scratch/sim_data.csv")
```

We then read in our pre-generated data and summarise the randomly generated simulation parameters. We can see that the 'scarce' condition has a higher bA value (i.e. a preference for the rarer target type).

```{r summarise_sim_data, message = FALSE}
d <- read_csv("../scratch/sim_data.csv") %>%
  mutate(condition = factor(condition))

d %>% group_by(person, condition) %>%
  summarise(bA = unique(bA),
    bS = unique(bS),
            sig_rho = unique(sig_rho),
            sig_d = unique(sig_d),
    .groups = "drop") -> sim_params

sim_params %>% 
  pivot_longer(-c(person, condition), names_to = "param", values_to = "value") %>%
  ggplot(aes(value, fill = condition)) + 
  geom_histogram(alpha = 0.33, position = position_identity(), bins = 12) + 
  facet_wrap(~param, scales="free")
```

## Summary Statistics

Here, we compute and plot some summary run length parameters. As expected, we can see a higher mean maximum length of runs (and a correspondingly smaller number of runs) in the 'scarce' condition.

```{r compute_run_stats, fig.height=3, message = FALSE}
######################################################
# check summary stats
######################################################
d %>% modelr::data_grid(person, trial, condition) %>% 
  rename(pp = "person", trl = "trial", blk = "condition") -> d_trls

d_runs <- pmap_df(d_trls, get_run_info, d)

d_runs %>% group_by(person, block) %>%
  summarise(mean_max_run = mean(max_run_length),
            mean_num_run = mean(n_runs),
            .groups = "drop") %>%
  rename(condition = "block") %>%
  full_join(sim_params) -> d_runs

d_runs %>% select(person, condition, mean_max_run, mean_num_run) %>%
  pivot_longer(-c(person, condition), names_to = "run_statistic", values_to = "value") %>%
  ggplot(aes(condition, value, fill = run_statistic)) + 
  geom_boxplot() +
  facet_wrap(~run_statistic) +
  guides(x =  guide_axis(angle = 90))
```

## Running the model

```{r set_up_data}
######################################################
# now prepare data for stan model
######################################################

d_stim <- d %>% select(person, condition, trial, id, x, y, class) %>%
  arrange(person, condition, trial, id) %>%
  filter(class > 0) %>%
  mutate(class = as.numeric(as_factor(class))) %>%
  rename(item_class = "class")

d_found <- d %>% filter(found > 0) %>% 
  arrange(person, condition, trial, found) %>%
  mutate(class = as.numeric(as_factor(class))) %>%
  rename(item_class = "class")

d_found <- fix_person_and_trial(d_found)
d_stim <- fix_person_and_trial(d_stim)
```

The code below runs the model. However, to make it easier to compile this document, this is pre-computed.

```{r create_stan_list, eval = FALSE}
d_list <- prep_data_for_stan(d_found, d_stim, c("spatial", "item_class"))
saveRDS(d_list, "../scratch/sensiv_sim.d_list")
```

```{r fit_model,eval=FALSE}
d_list <- readRDS("../scratch/sensiv_sim.d_list")

d_list <- add_priors_to_d_list(d_list)

######################################################
# run model
######################################################

m <- stan("../models/multi_level/foraging_model1.stan", data = d_list, 
           chains = 4, iter = 1000)

saveRDS(m,"../scratch/sensiv_sim.RDS")
```

Here we load in the model we fit earlier.

```{r}
m <- readRDS("../scratch/sensiv_sim.RDS")
```

## Posterior Probabilities

We now plot our model. The figure is available in the main paper, but shows that we are able to recover the simulated parameter values accurately.

```{r plot_model_post, fig.height=2.8, fig.width=8, eval=TRUE}
######################################################
# plot model
######################################################

# functions for extracting the posteriors are here:
source("../functions/post_functions.R")

# functions for plotting the model are in this script: 
source("../functions/plot_model.R")

# need to put them in alphabetical order here
cl <- c("equal-conjunction", "equal-feature","scarce-conjunction", "scarce-feature" )

post <- extract_post(m, d_found, cl)

plot_model_fixed(post,m, d_found, cl,                  
                 gt = list(pA = pA, 
                           b_stick = b_stick, 
                           rho_delta = sig_rho,
                           rho_psi = sig_d))


ggsave("../plots/sensiv_sim.pdf", width = 8, height = 6)
ggsave("../plots/sensiv_sim.png", width = 8, height = 6)
```

We can then compute the posterior probability of a difference between the different conditions. For H1, we can see that the model can detect the predicted $b_A$ difference between the equal and scarce conditions: the HDCI does not contain zero.

```{r, fig.height=2.8}

post2 <- post$fixed

post2 %>% pivot_longer(c(bA, b_stick, rho_delta, rho_psi), names_to = "param") %>%
  separate(condition, c("scarcity", "forage_type")) %>%
  pivot_wider(names_from = "scarcity", values_from = "value") %>%
  mutate(diff = scarce-equal) -> post2

post2 %>% group_by(param) %>%
  summarise(p_diff_gr0 = mean(diff>0)) %>%
  knitr::kable()

post2 %>% group_by(param) %>%
  median_hdci(diff, .width = 0.99) %>%
  knitr::kable(digits = 3)

post2 %>%
  ggplot(aes(diff)) + geom_density(aes(fill = forage_type), alpha = 0.5) + 
  geom_vline(xintercept = 0, linetype = 2) + 
  scale_fill_brewer(palette = "Greys") +
  facet_wrap(~param, scales="free", nrow = 1)
```

We can also check for differences between the feature and conjunction conditions: for H2, we predict that we expected to see a larger value for $b_S$ in the conjunction condition compared to the feature condition. We can see that the model can detect this predicted difference: the HDCI does not contain zero. Similarly, for H3, we predict that the effect of proximity will be larger in the feature condition, and again, the model is able to detect this difference.

```{r, fig.height=2.8}

post3 <- post$fixed

post3 %>% pivot_longer(c(bA, b_stick, rho_delta, rho_psi), names_to = "param") %>%
  separate(condition, c("scarcity", "forage_type")) %>%
  pivot_wider(names_from = "forage_type", values_from = "value") %>%
  mutate(diff = feature-conjunction) -> post3

post3 %>% group_by(param) %>%
  summarise(p_diff_gr0 = mean(diff>0)) %>%
  knitr::kable()

post3 %>% group_by(param) %>%
  median_hdci(diff, .width = 0.99) %>%
  knitr::kable(digits = 3)

post3 %>%
  ggplot(aes(diff)) + geom_density(aes(fill = scarcity), alpha = 0.5) + 
  geom_vline(xintercept = 0, linetype = 2) + 
  scale_fill_brewer(palette = "Greys") +
  facet_wrap(~param, scales="free", nrow = 1)
```

Finally, for H4, we can see that the model is able to predict the negative effect of relative direction, with the 99% HDCI all being negative.

```{r, fig.height=2.8}

post4 <- post$fixed

post4 %>% 
  median_hdci(rho_psi, .width = 0.99) %>%
  knitr::kable(digits = 3)

```
