---
title: "1 Checking Simulation and Features"
format: html
editor: visual
---

```{r, message = FALSE}
library(tidyverse)
library(rstan)
library(patchwork)

options(mc.cores = 8)

# set global ggplot theme
theme_set(theme_bw())

source("../functions/sim_foraging_data.R")
source("../functions/prep_data.R")
source("../functions/get_run_info.R")

```

In this document, we first give a brief outline of the Clarke et al (2022) foraging model. We demonstrate how we set up our simulations, and show some example single trials to demonstrate how different parameters affect the 'behaviour' of the simulation.

# A Generative Model of Foraging - Clarke et al (2022)

The model treats foraging as a sampling without replacement process in which each item $i$ has probability $p_i$ of being selected as the next target. The $p_i$ depends on four parameters:

- item $b_A$ - preference for selecting items of type $A$ rather than $B$.
- item $b_S$ - preference for selecting items of the same type as the previously selected item.
- item $\sigma_{\rho}$ - preference for selecting items close to the previously selected item.
- item $\sigma_d$ - preference to keep selecting items along a straight line versus changing direction.

These combine to give:

$w_i = g\left(b_at_i + b_sm(t_i, t_{i-1})\right) \times \rho_d(i, i-1) \rho_{\theta}(i, i-1)$

where $t_i = 1$ if item $i$ is of class $A$ and 0 otherwise, and $m(t_i, t_{i-1}) =1$ if item $i$ is the same class as the previously selected item. $\sigma_{\rho}$ and $\rho_d$ measure proximity and the effect of direction:

$\sigma_{\rho} = e^{-\sigma_{\rho}\rho(i,j)}$

$\sigma_d = e^{-\sigma_{rho}d(i,j)}$

$\rho(i,j)$ is simply the Euclidean distance between items $i$ and $j$, while $d$ is defined as:

$\d(i,j) = \frac{f(\text{atan2}(i, j) - \text{atan2}(i-1, i))}{\pi}$

with $f(\phi_1, \phi_2) = \text{min}((\phi_1 - \phi_2) \% 2\pi, (\phi_2 - \phi_1) \% 2\pi)$. 

This model is implemented in a multi-level framework, allowing each of the four parameters to vary from participant to participant. Further details including priors and full code can be found in Clarke et al (2022).

# Single Trial Simulations

First, we set up some initial parameters: the number of trials per condition, the number of target classes, and the number of targets per class. We also set some initial model parameter values (the stick-switch parameter, the proximity parameter and the relative direction parameter).

We then set up a simple function to allow us to plot trials.

```{r}

n_trials_per_cond <- 1

n_targ_class <- 2
n_targ_per_class <- list(c(10, 10))

# some sample values
bS <- 1
sig_d <- 15
sig_theta <- -2
```

```{r}
# function to plot trials
plot_item_selections <- function(d) 
{
  
  d %>% arrange(found) %>%
    mutate(class = as_factor(class)) %>%
    ggplot(aes(x, y, colour = class, label = found)) + 
    geom_point(size = 3) + geom_label() + 
    geom_path(aes( group = 1), colour = "black")
  
}
```

## A large classweight

In this simulation, we adjust the class weight values so that the simulation has a preference for the first class over the second class.

```{r}
targ_class_weights <- c(30,1)
d <- sim_foraging_trial(trl = 1, 
                   n_targ_class = 2, n_targ_per_class = c(10, 10), 
                   targ_class_weights = targ_class_weights,
                               bS = bS, 
                               sig_d = sig_d, sig_theta = sig_theta)  



plot_item_selections(d) + ggtitle("preference for class 1")
rle(d$class)
```

# Even class and preference for switching

In this simulation, there is an even preference for each class, but a strong preference for switching target type.

```{r}

targ_class_weights <- c(1,1)
bS = -10

d <- sim_foraging_trial(trl = 1, 
                        n_targ_class = 2, n_targ_per_class = c(10, 10), 
                        targ_class_weights = targ_class_weights,
                        bS = bS, 
                        sig_d = sig_d, sig_theta = sig_theta) 

plot_item_selections(d) + ggtitle("preference for switching")
rle(d$class)
```

# Even class and preference for sticking

In this simulation, there is an even preference for each class, but a strong preference for sticking with the same target type.

```{r}
bS = 10

d <- sim_foraging_trial(trl = 1, 
                        n_targ_class = 2, n_targ_per_class = c(10, 10), 
                        targ_class_weights = targ_class_weights,
                        bS = bS, 
                        sig_d = sig_d, sig_theta = sig_theta) 

plot_item_selections(d) + ggtitle("preference for sticking")

rle(d$class)
```

## Typical class values, no spatial effects

Here, we demonstrate a trial where all spatial effects have been removed.

```{r}
bS = 1
sig_d = 0
sig_theta = 0

d <- sim_foraging_trial(trl = 1, 
                        n_targ_class = 2, n_targ_per_class = c(10, 10), 
                        targ_class_weights = targ_class_weights,
                        bS = bS, 
                        sig_d = sig_d, sig_theta = sig_theta) 

plot_item_selections(d) + ggtitle("removed spatial effects")

rle(d$class)
```

## Really strong proximity effect

Here, we demonstrate a trial where proximity is an extremely strong effect.

```{r}

sig_d = 50

d <- sim_foraging_trial(trl = 1, 
                        n_targ_class = 2, n_targ_per_class = c(10, 10), 
                        targ_class_weights = targ_class_weights,
                        bS = bS, 
                        sig_d = sig_d, sig_theta = sig_theta) 

plot_item_selections(d) + ggtitle("Strong Proximity effect")

rle(d$class)
```

# Multiple People Simulations

In order to effectively simulate data for power analysis, we need to be able to simulate multiple participants. Here, we first generate a range of plausible random effects, based on sigma values seen in previous work.

```{r}

n_people <- 5
n_conditions <- 1
targ_class_weights <- list(c(1,1))
# fix sigmas to be based on CompBio paper
phi_class_weights <- 0.05
phi_stick <- 0.5
phi_d <- 5
phi_theta <- 0.5

 # generate random effects
dpeeps <- tibble(person = rep(1:n_people, n_conditions),
                 block  = rep(1:n_conditions, each = n_people),
                 mu_cw = rep(targ_class_weights, each = n_people),
                 sd_cw = phi_class_weights,
                 mu_stick = rep(bS, each = n_people),
                 sd_stick = phi_stick,
                 mu_d = rep(sig_d, each = n_people),
                 sd_d = phi_d,
                 mu_theta = rep(sig_theta, each = n_people),
                 sd_theta = phi_d) 
    

pmap_df(dpeeps, gen_random_fx) %>% knitr::kable()

```

We can then use these to generate simulated data (in this case, for just one condition).

```{r}
d <- sim_foraging_people(n_people,
                    n_conditions,
                    n_trials_per_cond,
                    n_targ_class = 2, n_targ_per_class = 10, 
                    targ_class_weights, phi_class_weights,
                    bS = 0, phi_stick = 1,
                    sig_d = 0, phi_d = 5,
                    sig_theta = 0, phi_theta = 1)

d %>% group_by(person, condition) %>%
  summarise(bA = unique(bA),
    bS = unique(bS),
            sig_d = unique(sig_d),
            sig_theta = unique(sig_theta),
    .groups = "drop") -> sim_params

round(sim_params,3) %>% knitr::kable()

```
