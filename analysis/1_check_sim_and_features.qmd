---
title: "1 Checking Simulation and Features"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(rstan)
library(patchwork)

options(mc.cores = 8)

# set global ggplot theme
theme_set(theme_bw())

source("../functions/sim_foraging_data.R")
source("../functions/prep_data.R")
source("../functions/get_run_info.R")

```

# Single Trial Simulations

```{r}

n_trials_per_cond <- 1

n_targ_class <- 2
n_targ_per_class <- list(c(10, 10))
 # A is 3x preferable over B 

# calculate 
bS <- 1
sig_d <- 15
sig_theta <- -2
```

```{r}
# function to plot trials
plot_item_selections <- function(d) 
{
  
  d %>% arrange(found) %>%
    mutate(class = as_factor(class)) %>%
    ggplot(aes(x, y, colour = class, label = found)) + 
    geom_point(size = 3) + geom_label() + 
    geom_path(aes( group = 1), colour = "black")
  
}
```


## A large classweight

```{r}
targ_class_weights <- c(30,1)
d <- sim_foraging_trial(trl = 1, 
                   n_targ_class = 2, n_targ_per_class = c(10, 10), 
                   targ_class_weights = targ_class_weights,
                               bS = bS, 
                               sig_d = sig_d, sig_theta = sig_theta)  



plot_item_selections(d) + ggtitle("preference for class 1")
rle(d$class)
```
# Even class and pref for switching

```{r}

targ_class_weights <- c(1,1)
bS = -10

d <- sim_foraging_trial(trl = 1, 
                        n_targ_class = 2, n_targ_per_class = c(10, 10), 
                        targ_class_weights = targ_class_weights,
                        bS = bS, 
                        sig_d = sig_d, sig_theta = sig_theta) 

plot_item_selections(d) + ggtitle("preference for switching")
rle(d$class)
```

# Even class and pref for sticking

```{r}
bS = 10

d <- sim_foraging_trial(trl = 1, 
                        n_targ_class = 2, n_targ_per_class = c(10, 10), 
                        targ_class_weights = targ_class_weights,
                        bS = bS, 
                        sig_d = sig_d, sig_theta = sig_theta) 

plot_item_selections(d) + ggtitle("preference for sticking")

rle(d$class)
```

## Typical class values, no spatial effects

```{r}
bS = 1
sig_d = 0
sig_theta = 0

d <- sim_foraging_trial(trl = 1, 
                        n_targ_class = 2, n_targ_per_class = c(10, 10), 
                        targ_class_weights = targ_class_weights,
                        bS = bS, 
                        sig_d = sig_d, sig_theta = sig_theta) 

plot_item_selections(d) + ggtitle("removed spatial effects")

rle(d$class)
```

## Really strong proximity effect

```{r}

sig_d = 50

d <- sim_foraging_trial(trl = 1, 
                        n_targ_class = 2, n_targ_per_class = c(10, 10), 
                        targ_class_weights = targ_class_weights,
                        bS = bS, 
                        sig_d = sig_d, sig_theta = sig_theta) 

plot_item_selections(d) + ggtitle("Strong Proximity effect")

rle(d$class)
```

# Multipe Trial Simulations

# Multiple People Simulations

```{r}

n_people <- 5
n_conditions <- 1
targ_class_weights <- list(c(1,1))
# fix sigmas to be based on CompBio paper
phi_class_weights <- 0.05
phi_stick <- 0.5
phi_d <- 5
phi_theta <- 0.5

 # generate random effects
dpeeps <- tibble(person = rep(1:n_people, n_conditions),
                 block  = rep(1:n_conditions, each = n_people),
                 mu_cw = rep(targ_class_weights, each = n_people),
                 sd_cw = phi_class_weights,
                 mu_stick = rep(bS, each = n_people),
                 sd_stick = phi_stick,
                 mu_d = rep(sig_d, each = n_people),
                 sd_d = phi_d,
                 mu_theta = rep(sig_theta, each = n_people),
                 sd_theta = phi_d) 
    

pmap_df(dpeeps, gen_random_fx) %>% knitr::kable()

```

```{r}
d <- sim_foraging_people(n_people,
                    n_conditions,
                    n_trials_per_cond,
                    n_targ_class = 2, n_targ_per_class = 10, 
                    targ_class_weights, phi_class_weights,
                    bS = 0, phi_stick = 1,
                    sig_d = 0, phi_d = 5,
                    sig_theta = 0, phi_theta = 1)

d %>% group_by(person, condition) %>%
  summarise(bA = unique(bA),
    bS = unique(bS),
            sig_d = unique(sig_d),
            sig_theta = unique(sig_theta),
    .groups = "drop") -> sim_params

round(sim_params,3) %>% knitr::kable()

```


