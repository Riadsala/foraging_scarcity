median_hdci(q, .width = c(0.53, 0.97)) %>%
select(-q, -.point, -.interval) %>%
unite("interval", .lower, .upper) %>%
pivot_wider(names_from = ".width", values_from = "interval") %>%
separate(`0.53`, c("lower53", "upper53"), sep  = "_", convert = T)  %>%
separate(`0.97`, c("lower97", "upper97"), sep  = "_", convert = T) -> q
#
q %>%
ggplot(aes(t)) +
geom_ribbon(aes(ymin = lower97, ymax = upper97, fill = block), alpha = 0.5, colour = "white") +
geom_ribbon(aes(ymin = lower53, ymax = upper53, fill = block), alpha = 0.7) +
scale_x_continuous("distance to target") +
scale_y_continuous("weighting") -> plt_dis
plt_dis
#
q %>%
ggplot(aes(t)) +
geom_ribbon(aes(ymin = lower97, ymax = upper97, fill = block), alpha = 0.5) +
geom_ribbon(aes(ymin = lower53, ymax = upper53, fill = block), alpha = 0.7) +
scale_x_continuous("distance to target") +
scale_y_continuous("weighting") -> plt_dis
plt_dis
sqrt(2)
pmap_dfr(tmp, function(phi_dis, p_floor, t, block) tibble(t=t, block = block,
q = exp(-phi_dis * t) + exp(p_floor)),
t = seq(0, 2.5, 0.05)) %>%
group_by(block, t) %>%
median_hdci(q, .width = c(0.53, 0.97)) %>%
select(-q, -.point, -.interval) %>%
unite("interval", .lower, .upper) %>%
pivot_wider(names_from = ".width", values_from = "interval") %>%
separate(`0.53`, c("lower53", "upper53"), sep  = "_", convert = T)  %>%
separate(`0.97`, c("lower97", "upper97"), sep  = "_", convert = T) -> q
#
q %>%
ggplot(aes(t)) +
geom_ribbon(aes(ymin = lower97, ymax = upper97, fill = block), alpha = 0.5) +
geom_ribbon(aes(ymin = lower53, ymax = upper53, fill = block), alpha = 0.7) +
scale_x_continuous("distance to target") +
scale_y_continuous("weighting") -> plt_dis
plt_lambda + plt_dis
m %>% recover_types(d$found) %>%
spread_draws(lambda[person]) %>%
mutate(person = as_factor(person)) %>%
ggplot(aes(lambda, person)) +
stat_pointinterval(colour = "white") -> plt_lambda
# draw direction tuning figure
post %>% ungroup %>%
select(block, phi_dis, p_floor) -> tmp
pmap_dfr(tmp, function(phi_dis, p_floor, t, block) tibble(t=t, block = block,
q = exp(-phi_dis * t) + exp(p_floor)),
t = seq(0, 2.5, 0.05)) %>%
group_by(block, t) %>%
median_hdci(q, .width = c(0.53, 0.97)) %>%
select(-q, -.point, -.interval) %>%
unite("interval", .lower, .upper) %>%
pivot_wider(names_from = ".width", values_from = "interval") %>%
separate(`0.53`, c("lower53", "upper53"), sep  = "_", convert = T)  %>%
separate(`0.97`, c("lower97", "upper97"), sep  = "_", convert = T) -> q
#
q %>%
ggplot(aes(t)) +
geom_ribbon(aes(ymin = lower97, ymax = upper97, fill = block), alpha = 0.5) +
geom_ribbon(aes(ymin = lower53, ymax = upper53, fill = block), alpha = 0.7) +
scale_x_continuous("distance to target") +
scale_y_continuous("weighting") -> plt_dis
plt_lambda + plt_dis
source("~/Documents/ongoing projects/foraging_models_2/scripts/testing_with_simulation.R", echo=TRUE)
post
m
m <- readRDS("scratch/tmp.model")
m
m %>% recover_types(d$found) %>%
spread_draws(p_floor[block], phi_dis[block], phi_dir[block], u)
m %>% recover_types(d$found) %>%
spread_draws(p_floor[block], phi_dis[block], phi_dir[block], u[person, block])
m %>% recover_types(d$found) %>%
spread_draws(p_floor[block], phi_dis[block], phi_dir[block], u[block, person])
m %>% recover_types(d$found) %>%
spread_draws(p_floor[block], phi_dis[block], phi_dir[block]) %>%
mutate(block = as_factor(block),
block = fct_recode(block, feature = "1", conjunction = "2")) %>%
ungroup() -> post
m %>% recover_types(d$found) %>%
spread_draws(u[block, person]) -> post_u
post_u
tail(post_u)
m %>% spread_draws(u[block, person]) -> post_u
pot_u
post_u
m %>% spread_draws(u[block, person]) %>%
mutate(param = case_when(
block == 1 ~ "dir",
TRUE ~ NA
))-> post_u
m %>% spread_draws(u[block, person]) %>%
mutate(param = case_when(
block == 1 ~ "dir",
block == 2 ~ "dis",
TRUE ~ NA
))-> post_u
m %>% spread_draws(u[block, person])
m %>% spread_draws(u[block, person]) %>%
mutate(param = block %% 3)-> post_u
post_u
?spread_draws
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3)-> post_u
post_u
as.data.frame(post_u)
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param))-> post_u
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = ceil(block / 3))-> post_u
post_u
tail(post-U)
tail(post_u)
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = ceil(block / 3))-> post_u
tail(post_u)
d_draws(u[block, person], n = 2) %>%
mutate(pa
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3))-> post_u
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3))-> post_u
post_u
tail(post_u)
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3),
block = ceiling(blockj))-> post_u
tail(post_u)
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3),
block = ceiling(blockj),
param = as_factor(param),
param - fct_recode(param, phi_dir = "1"))-> post_u
post_u
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3),
block = ceiling(block),
param = as_factor(param),
param - fct_recode(param, phi_dir = "1"))-> post_u
post_u
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3),
block = ceiling(block),
param = as_factor(param),
param = fct_recode(param, phi_dir = "1"))-> post_u
post_u
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3),
block = ceiling(block),
param = as_factor(param),
param = fct_recode(param, phi_dir = "1", "phi_dis" "2", "p_floor" = "3"))-> post_u
m %>% spread_draws(u[block, person], n = 2) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3),
block = ceiling(block),
param = as_factor(param),
param = fct_recode(param, phi_dir = "1", "phi_dis" = "2", "p_floor" = "3"))-> post_u
post_u
summary(post_u)
m %>% recover_types(d$found) %>%
spread_draws(p_floor[block], phi_dis[block], phi_dir[block]) %>%
mutate(block = as_factor(block),
block = fct_recode(block, feature = "1", conjunction = "2")) %>%
ungroup() -> post
post
m %>% recover_types(d$found) %>%
spread_draws(p_floor[block], phi_dis[block], phi_dir[block]) %>%
mutate(block = as_factor(block),
block = fct_recode(block, feature = "1", conjunction = "2")) %>%
ungroup() %>%
pivot_longer(c(phi_dis, phi_dir, p_floor), names_to = "param", values_to = "z") -> post
m %>% spread_draws(u[block, person],) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3),
block = ceiling(block),
param = as_factor(param),
param = fct_recode(param, phi_dir = "1", "phi_dis" = "2", "p_floor" = "3"))-> post_u
post_u
m %>% recover_types(d$found) %>%
spread_draws(p_floor[block], phi_dis[block], phi_dir[block]) %>%
mutate(block = as_factor(block),
block = fct_recode(block, feature = "1", conjunction = "2")) %>%
ungroup() %>%
pivot_longer(c(phi_dis, phi_dir, p_floor), names_to = "param", values_to = "u") -> post
m %>% spread_draws(u[block, person],) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3),
block = ceiling(block),
param = as_factor(param),
param = fct_recode(param, phi_dir = "1", "phi_dis" = "2", "p_floor" = "3"))-> post_u
full_join(post, post_u)
m %>%
spread_draws(p_floor[block], phi_dis[block], phi_dir[block]) %>%
mutate(block = as_factor(block),
block = fct_recode(block, feature = "1", conjunction = "2")) %>%
ungroup() %>%
pivot_longer(c(phi_dis, phi_dir, p_floor), names_to = "param", values_to = "u") -> post
full_join(post, post_u)
m %>% spread_draws(u[block, person],) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3),
block = ceiling(block),
block = as_factor(block),
block = fct_recode(block, feature = "1", conjunction = "2"),
param = as_factor(param),
param = fct_recode(param, phi_dir = "1", "phi_dis" = "2", "p_floor" = "3"))-> post_u
full_join(post, post_u)
m %>% spread_draws(u[block, person],) %>%
mutate(param = block %% 3,
param = if_else(param == 0, 3, param),
block = (block / 3),
block = ceiling(block),
block = as_factor(block),
block = fct_recode(block, feature = "1", conjunction = "2"),
param = as_factor(param),
param = fct_recode(param, phi_dir = "1", "phi_dis" = "2", "p_floor" = "3")) %>%
rename(uz = "u") -> post_u
full_join(post, post_u)
full_join(post %>%
pivot_longer(c(phi_dis, phi_dir, p_floor), names_to = "param", values_to = "u"),
post_u) %>%
mutate(uz = u + uz) %>%
group_by(person, block) %>%
summarise(uz = mean(uz))
m %>%
spread_draws(p_floor[block], phi_dis[block], phi_dir[block]) %>%
mutate(block = as_factor(block),
block = fct_recode(block, feature = "1", conjunction = "2")) %>%
ungroup() -> post
full_join(post %>%
pivot_longer(c(phi_dis, phi_dir, p_floor), names_to = "param", values_to = "u"),
post_u) %>%
mutate(uz = u + uz) %>%
group_by(person, block) %>%
summarise(uz = mean(uz))
full_join(post %>%
pivot_longer(c(phi_dis, phi_dir, p_floor), names_to = "param", values_to = "u"),
post_u) %>%
mutate(uz = u + uz) %>%
group_by(person, block, param) %>%
summarise(uz = mean(uz))
# now to lambdas
m %>% recover_types(d$found) %>%
spread_draws(lambda[person]) %>%
mutate(person = as_factor(person)) %>%
ggplot(aes(lambda, person)) +
stat_pointinterval(colour = "white") -> plt_lambda
# draw direction tuning figure
post %>% ungroup %>%
select(block, phi_dis, p_floor) -> tmp
pmap_dfr(tmp, function(phi_dis, p_floor, t, block) tibble(t=t, block = block,
q = exp(-phi_dis * t) + exp(p_floor)),
t = seq(0, 1.5, 0.05)) %>%
group_by(block, t) %>%
median_hdci(q, .width = c(0.53, 0.97)) %>%
select(-q, -.point, -.interval) %>%
unite("interval", .lower, .upper) %>%
pivot_wider(names_from = ".width", values_from = "interval") %>%
separate(`0.53`, c("lower53", "upper53"), sep  = "_", convert = T)  %>%
separate(`0.97`, c("lower97", "upper97"), sep  = "_", convert = T) -> q
#
q %>%
ggplot(aes(t)) +
geom_ribbon(aes(ymin = lower97, ymax = upper97, fill = block), alpha = 0.5) +
geom_ribbon(aes(ymin = lower53, ymax = upper53, fill = block), alpha = 0.7) +
scale_x_continuous("distance to target") +
scale_y_continuous("weighting") -> plt_dis
plt_lambda + plt_dis
pmap_dfr(post, function(phi_dis, p_floor, t, block) tibble(t=t, block = block,
q = exp(-phi_dis * t) + exp(p_floor)),
t = seq(0, 1.5, 0.05)) %>%
group_by(block, t) %>%
median_hdci(q, .width = c(0.53, 0.97)) %>%
select(-q, -.point, -.interval) %>%
unite("interval", .lower, .upper) %>%
pivot_wider(names_from = ".width", values_from = "interval") %>%
separate(`0.53`, c("lower53", "upper53"), sep  = "_", convert = T)  %>%
separate(`0.97`, c("lower97", "upper97"), sep  = "_", convert = T) -> q
pmap_dfr(select(post, block, phi_dis, p_floor),
function(phi_dis, p_floor, t, block) tibble(t=t, block = block,
q = exp(-phi_dis * t) + exp(p_floor)),
t = seq(0, 1.5, 0.05)) %>%
group_by(block, t) %>%
median_hdci(q, .width = c(0.53, 0.97)) %>%
select(-q, -.point, -.interval) %>%
unite("interval", .lower, .upper) %>%
pivot_wider(names_from = ".width", values_from = "interval") %>%
separate(`0.53`, c("lower53", "upper53"), sep  = "_", convert = T)  %>%
separate(`0.97`, c("lower97", "upper97"), sep  = "_", convert = T) -> q
# draw distance tuning figure
pmap_dfr(select(post, block, phi_dis, p_floor),
function(phi_dis, p_floor, t, block) tibble(t=t, block = block,
q = exp(-phi_dis * t) + exp(p_floor)),
t = distances) %>%
group_by(block, t) %>%
median_hdci(q, .width = c(0.53, 0.97)) %>%
select(-q, -.point, -.interval) %>%
unite("interval", .lower, .upper) %>%
pivot_wider(names_from = ".width", values_from = "interval") %>%
separate(`0.53`, c("lower53", "upper53"), sep  = "_", convert = T)  %>%
separate(`0.97`, c("lower97", "upper97"), sep  = "_", convert = T) -> q
distances <- seq(0, 1.5, 0.05)
# draw distance tuning figure
pmap_dfr(select(post, block, phi_dis, p_floor),
function(phi_dis, p_floor, t, block) tibble(t=t, block = block,
q = exp(-phi_dis * t) + exp(p_floor)),
t = distances) %>%
group_by(block, t) %>%
median_hdci(q, .width = c(0.53, 0.97)) %>%
select(-q, -.point, -.interval) %>%
unite("interval", .lower, .upper) %>%
pivot_wider(names_from = ".width", values_from = "interval") %>%
separate(`0.53`, c("lower53", "upper53"), sep  = "_", convert = T)  %>%
separate(`0.97`, c("lower97", "upper97"), sep  = "_", convert = T) -> q
full_join(post %>%
pivot_longer(c(phi_dis, phi_dir, p_floor), names_to = "param", values_to = "u"),
post_u) %>%
mutate(uz = u + uz) %>%
group_by(person, block, param) %>%
summarise(uz = mean(uz)) - post_u
source("~/Documents/ongoing projects/foraging_models_2/scripts/testing_with_simulation.R", echo=TRUE)
m
library(tidyverse)
library(rstan)
library(patchwork)
library(tidybayes)
library(ggdark)
theme_set(dark_theme_bw())
d <- read_csv("scratch/sim_data.csv")
m <- readRDS("scratch/tmp.model")
source("../functions/plot_model.R")
plot_model_fixed(m)
m %>% recover_types(d$found) %>%
spread_draws(cW[block, class], bS[block], p_floor[block], phi_dis[block], phi_dir[block]) %>%
mutate(block = as_factor(block),
block = fct_recode(block, feature = "1", conjunction = "2"),
class = as_factor(class)) %>%
ungroup() -> post
m %>% recover_types(d$found) %>%
spread_draws(prior_cW[class], prior_sW, prior_phi_dis, prior_phi_dir, prior_p_floor) %>%
mutate(class = as_factor(class)) %>%
ungroup() -> prior
n_classes <- length(unique(post$class))
my_widths <- c(0.53, 0.97)
# plot class weights
post %>%
ggplot() +
geom_rect(data = prior %>%
median_hdci(prior_cW, .width = c(0.53, 0.97)),
aes(xmin = -Inf, xmax = Inf, ymin = .lower, ymax = .upper),
fill = "white", alpha = 0.25) +
stat_pointinterval(aes(class, cW, colour = block),
.width = my_widths,
position = position_dodge(0.2)) +
geom_hline(yintercept = 1/n_classes, linetype = 2) +
scale_y_continuous("class weights", limits = c(0, 1))  -> plt_cW
# plot stick-switch param
post  %>%
ggplot()  +
geom_rect(data = prior %>%
median_hdci(prior_sW, .width = c(0.53, 0.97)) %>%
mutate(.lower = boot::inv.logit(.lower),
.upper = boot::inv.logit(.upper)),
aes(ymin = -Inf, ymax = Inf, xmin = .lower, xmax = .upper),
fill = "white", alpha = 0.25) +
geom_vline(xintercept = 0.5, colour = "black", linetype= 2) +
stat_pointinterval(aes(boot::inv.logit(bS), block, colour = block), .width = my_widths) +
geom_vline(xintercept = 0.5, linetype = 2) +
scale_x_continuous("stick probability", limits = c(0, 1))  -> plt_sW
# plot proximity and direciton effects
plt_dis <- plt_post_prior("phi_dis", "proximity tuning")
plt_dir <- plt_post_prior("phi_dir", "direciton tuning")
plt_flr <- plt_post_prior("p_floor", "floor")
plt <-  (plt_cW + plt_sW) / (plt_dis + plt_dir  + plt_flr) +
plot_layout(guides = "collect") & theme(legend.position = "bottom")
plt
source("../functions/plot_model.R")
plot_model_fixed(m)
setwd("~/Documents/ongoing projects/foraging_rr/scripts")
library(tidyverse)
library(rstan)
library(patchwork)
library(tidybayes)
library(ggdark)
m <- readRDS("../scratch/tmp.model")
source("../functions/plot_model.R")
plot_model_fixed(m)
library(tidyverse)
library(rstan)
library(patchwork)
library(tidybayes)
library(loo)
library(ggdark)
# function to test the main multi-level foraging model
options(mc.cores = parallel::detectCores())
source("../functions/sim_foraging_data.R")
source("../functions/prep_data.R")
source("../functions/get_run_info.R")
######################################################
# first of all we want to generate some synthetic data
######################################################
n_people <- 6
n_conditions <- 2
n_trials_per_cond <- 5
n_targ_per_class <- 8
n_targ_class <- 2
targ_class_weights <- list(c(1,1), c(2,1))
b_stick <- c(2.1, 0)
sig_d <- 10
sig_theta <- -1
phi_stick <- 0.2
phi_d <- 2
phi_theta <- 1
d <- sim_foraging_people(n_people = n_people,
n_conditions = n_conditions,
n_trials_per_cond = n_trials_per_cond,
n_targ_class = n_targ_class,
n_targ_per_class = n_targ_per_class,
targ_class_weights = targ_class_weights,
b_stick = b_stick, sig_d = sig_d, sig_theta = sig_theta, # fixed effects
phi_stick = phi_stick, phi_d = phi_d, phi_theta = phi_theta) # random effects)
write_csv(d, "../scratch/sim_data.csv")
d <- read_csv("../scratch/sim_data.csv")
library(tidyverse)
library(rstan)
library(patchwork)
library(tidybayes)
library(loo)
library(ggdark)
# function to test the main multi-level foraging model
options(mc.cores = parallel::detectCores())
source("../functions/sim_foraging_data.R")
source("../functions/prep_data.R")
source("../functions/get_run_info.R")
######################################################
# first of all we want to generate some synthetic data
######################################################
n_people <- 6
n_conditions <- 2
n_trials_per_cond <- 5
n_targ_per_class <- 8
n_targ_class <- 2
targ_class_weights <- list(c(1,1), c(2,1))
b_stick <- c(2.1, 0)
sig_d <- 10
sig_theta <- -1
phi_stick <- 0.2
phi_d <- 2
phi_theta <- 1
d <- sim_foraging_people(n_people = n_people,
n_conditions = n_conditions,
n_trials_per_cond = n_trials_per_cond,
n_targ_class = n_targ_class,
n_targ_per_class = n_targ_per_class,
targ_class_weights = targ_class_weights,
b_stick = b_stick, sig_d = sig_d, sig_theta = sig_theta, # fixed effects
phi_stick = phi_stick, phi_d = phi_d, phi_theta = phi_theta) # random effects)
write_csv(d, "../scratch/sim_data.csv")
d <- read_csv("../scratch/sim_data.csv")
source("~/Documents/ongoing projects/foraging_rr/scripts/plotting_test_output.R", echo=TRUE)
traceback()
m %>% recover_types(d$found) %>%
spread_draws(cW[block, class], bS[block], p_floor[block], phi_dis[block], phi_dir[block]) %>%
mutate(block = as_factor(block),
block = fct_recode(block, feature = "1", conjunction = "2"),
class = as_factor(class)) %>%
ungroup() -> post
# plot class weights
post %>%
ggplot() +
geom_rect(data = prior %>%
median_hdci(prior_cW, .width = c(0.53, 0.97)),
aes(xmin = -Inf, xmax = Inf, ymin = .lower, ymax = .upper),
fill = "white", alpha = 0.25) +
stat_pointinterval(aes(class, cW, colour = block),
.width = my_widths,
position = position_dodge(0.2)) +
geom_hline(yintercept = 1/n_classes, linetype = 2) +
scale_y_continuous("class weights", limits = c(0, 1))  -> plt_cW
plot_model_fixed(m)
m %>% recover_types(d$found) %>%
spread_draws(prior_cW[class], prior_sW, prior_phi_dis, prior_phi_dir, prior_p_floor) %>%
mutate(class = as_factor(class)) %>%
ungroup() -> prior
plot_model_fixed(m)
